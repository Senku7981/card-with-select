import { make } from '../utils/dom';
import type { FileHandler } from './file-handler';

/**
 * Renderer for DOM elements
 * –†–µ–Ω–¥–µ—Ä–µ—Ä DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤
 */
class DOMRenderer {
    private fileHandler: FileHandler;

    constructor(fileHandler: FileHandler) {
        this.fileHandler = fileHandler;
    }

    /**
     * Render file zone
     * –†–µ–Ω–¥–µ—Ä–∏—Ç—å –∑–æ–Ω—É —Ñ–∞–π–ª–æ–≤
     */
    public renderFileZone(): HTMLElement {
        const fileZone: HTMLElement = make('div', ['card-with-select__item__file-zone'], {});

        fileZone.innerHTML = `
      <div class="card-with-select__item__file-zone__text">–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Ñ–∞–π–ª —Å—é–¥–∞ –∏–ª–∏</div>
      <button class="card-with-select__item__file-zone__button" type="button">–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª</button>
    `;

        return fileZone;
    }

    /**
     * Show file upload progress
     * –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
     * @param entity - entity object / –æ–±—ä–µ–∫—Ç —Å—É—â–Ω–æ—Å—Ç–∏
     * @param file - file being uploaded / –∑–∞–≥—Ä—É–∂–∞–µ–º—ã–π —Ñ–∞–π–ª
     */
    public showFileUploadProgress(entity: any, file: File): void {
        const fileIcon: string = this.fileHandler.getFileIcon(file.name);

        entity.fileInfo.innerHTML = `
      <div style="
        padding: 12px;
        background: rgba(103, 136, 243, 0.05);
        border-radius: 6px;
        border: 1px solid rgba(103, 136, 243, 0.1);
        width: 240px;
        max-width: 240px;
        box-sizing: border-box;
        margin-bottom: 12px;
      ">
        <div style="
          display: flex; 
          align-items: center; 
          gap: 12px;
        ">
          <span style="font-size: 18px; flex-shrink: 0;">${fileIcon}</span>
          <div style="flex: 1; min-width: 0;">
            <div style="
              color: #6788F3; 
              font-weight: 500; 
              font-size: 13px;
              white-space: nowrap;
              overflow: hidden;
              text-overflow: ellipsis;
            ">${file.name}</div>
            <div style="color: #6788F3; font-size: 11px;">
              –ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è... ${this.fileHandler.formatFileSize(file.size)}
            </div>
          </div>
        </div>
      </div>
    `;
        entity.fileZone.style.display = 'none';
    }

    /**
     * Display file information
     * –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
     * @param entity - entity object / –æ–±—ä–µ–∫—Ç —Å—É—â–Ω–æ—Å—Ç–∏
     * @param fileData - file data / –¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞
     * @param onFileReplace - callback when file is replaced / –∫–æ–ª–±—ç–∫ –ø—Ä–∏ –∑–∞–º–µ–Ω–µ —Ñ–∞–π–ª–∞
     */
    public displayFileInfo(
        entity: any,
        fileData: {
            url: string;
            name: string;
            size?: number;
            isBlob?: boolean;
        },
        onFileReplace: () => void
    ): void {
        const sizeText: string = fileData.size ? ` (${this.fileHandler.formatFileSize(fileData.size)})` : '';

        const getFileNameWithoutExtension = (fileName: string): string => {
            const parts: string[] = fileName.split('.');
            if (parts.length > 1) {
                return parts.slice(0, -1).join('.');
            }
            return fileName;
        };

        const fileIcon: string = this.fileHandler.getFileIcon(fileData.name);
        const fileExtension: string = this.fileHandler.getFileExtension(fileData.name);

        entity.fileInfo.innerHTML = `
      <div style="
        padding: 12px;
        background: rgba(103, 136, 243, 0.05);
        border-radius: 6px;
        border: 1px solid rgba(103, 136, 243, 0.1);
        width: 240px;
        max-width: 240px;
        box-sizing: border-box;
        margin-bottom: 12px;
      ">
        <!-- –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ -->
        <div style="
          display: flex; 
          align-items: center; 
          gap: 12px; 
          margin-bottom: 12px;
        ">
          <span style="font-size: 18px; flex-shrink: 0;">${fileIcon}</span>
          <div style="
            flex: 1; 
            min-width: 0;
            max-width: calc(100% - 120px);
            overflow: hidden;
          ">
            <div style="
              color: #6788F3; 
              font-weight: 500; 
              font-size: 14px;
              white-space: nowrap;
              overflow: hidden;
              text-overflow: ellipsis;
              max-width: 100%;
            " title="${fileData.name}">${fileData.name}</div>
            <div style="
              color: #6788F3; 
              opacity: 0.7; 
              font-size: 12px;
              white-space: nowrap;
              overflow: hidden;
              text-overflow: ellipsis;
            ">${sizeText}</div>
          </div>
          <button class="card-with-select__item__change-file" type="button" style="
            flex-shrink: 0;
            background: transparent;
            border: 1px solid #6788F3;
            color: #6788F3;
            padding: 6px 12px;
            border-radius: 4px;
            font-size: 12px;
            cursor: pointer;
            font-family: 'TT Hoves', sans-serif;
            white-space: nowrap;
          ">–ó–∞–º–µ–Ω–∏—Ç—å</button>
        </div>
        
        <!-- –ü–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ -->
        <div style="margin-bottom: 12px;">
          <label style="
            display: block;
            color: #6788F3;
            font-size: 12px;
            margin-bottom: 6px;
            font-weight: 500;
          ">–Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞:</label>
          <input 
            type="text" 
            class="card-with-select__item__file-name-input"
            value="${getFileNameWithoutExtension(fileData.name)}"
            style="
              width: 100%;
              padding: 8px 12px;
              border: 1px solid rgba(103, 136, 243, 0.3);
              border-radius: 4px;
              font-size: 13px;
              color: #6788F3;
              background: white;
              box-sizing: border-box;
              font-family: 'TT Hoves', sans-serif;
            "
            placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"
            data-original-extension="${fileExtension}"
          />
        </div>
        
        <!-- –°—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è -->
        <div>
          ${fileData.isBlob
                ? `
              <span style="
                color: #999; 
                font-size: 12px;
                display: inline-flex;
                align-items: center;
                gap: 4px;
              ">
                <span style="flex-shrink: 0;">‚ö†Ô∏è</span>
                <span>–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ (—Ñ–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä)</span>
              </span>
            `
                : `
              <a href="${fileData.url}" download="${fileData.name}" style="
                color: #6788F3; 
                font-size: 12px;
                text-decoration: none;
                display: inline-flex;
                align-items: center;
                gap: 4px;
                max-width: 100%;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;
                cursor: pointer;
              ">
                <span style="flex-shrink: 0;">üì•</span>
                <span style="overflow: hidden; text-overflow: ellipsis;">–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª</span>
              </a>
            `}
        </div>
      </div>
    `;

        this.setupFileInfoEvents(entity, onFileReplace);
        entity.fileZone.style.display = 'none';
    }

    /**
     * Setup events for file info elements
     * –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–æ–±—ã—Ç–∏—è –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ
     * @param entity - entity object / –æ–±—ä–µ–∫—Ç —Å—É—â–Ω–æ—Å—Ç–∏
     * @param onFileReplace - callback when file is replaced / –∫–æ–ª–±—ç–∫ –ø—Ä–∏ –∑–∞–º–µ–Ω–µ —Ñ–∞–π–ª–∞
     */
    private setupFileInfoEvents(entity: any, onFileReplace: () => void): void {
        const changeButton: Element | null = entity.fileInfo.querySelector('.card-with-select__item__change-file');

        if (changeButton) {
            changeButton.addEventListener('click', (): void => {
                onFileReplace();
            });

            changeButton.addEventListener('mouseenter', (): void => {
                (changeButton as HTMLElement).style.background = '#6788F3';
                (changeButton as HTMLElement).style.color = 'white';
            });

            changeButton.addEventListener('mouseleave', (): void => {
                (changeButton as HTMLElement).style.background = 'transparent';
                (changeButton as HTMLElement).style.color = '#6788F3';
            });
        }

        const fileNameInput: Element | null = entity.fileInfo.querySelector('.card-with-select__item__file-name-input');

        if (fileNameInput) {
            fileNameInput.addEventListener('input', (event: Event): void => {
                const inputElement: HTMLInputElement = event.target as HTMLInputElement;
                const newNameWithoutExtension: string = inputElement.value;
                const originalExtension: string = inputElement.dataset.originalExtension || '';

                const fullFileName: string = originalExtension
                    ? `${newNameWithoutExtension}.${originalExtension}`
                    : newNameWithoutExtension;

                const currentFileData = JSON.parse(entity.entity.dataset.fileData || '{}');
                currentFileData.displayName = fullFileName;
                entity.entity.dataset.fileData = JSON.stringify(currentFileData);
            });

            fileNameInput.addEventListener('focus', (): void => {
                (fileNameInput as HTMLInputElement).style.borderColor = '#6788F3';
                (fileNameInput as HTMLInputElement).style.boxShadow = '0 0 0 2px rgba(103, 136, 243, 0.1)';
            });

            fileNameInput.addEventListener('blur', (): void => {
                (fileNameInput as HTMLInputElement).style.borderColor = 'rgba(103, 136, 243, 0.3)';
                (fileNameInput as HTMLInputElement).style.boxShadow = 'none';
            });
        }
    }
}

export { DOMRenderer };
