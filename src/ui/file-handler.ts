import type { API } from '@editorjs/editorjs';

/**
 * Handler for file operations
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∞–π–ª–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
 */
class FileHandler {
    private api: API;

    constructor(api: API) {
        this.api = api;
    }

    /**
     * Handle file upload
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
     * @param file - file to upload / —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
     * @param entity - entity object / –æ–±—ä–µ–∫—Ç —Å—É—â–Ω–æ—Å—Ç–∏
     * @param onProgress - progress callback / –∫–æ–ª–±—ç–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
     * @param onSuccess - success callback / –∫–æ–ª–±—ç–∫ —É—Å–ø–µ—Ö–∞
     * @param onError - error callback / –∫–æ–ª–±—ç–∫ –æ—à–∏–±–∫–∏
     */
    public handleFileUpload(
        file: File,
        entity: any,
        onProgress: (entity: any, file: File) => void,
        onSuccess: (entity: any, fileData: any) => void,
        onError: (entity: any, error: Error) => void
    ): void {
        onProgress(entity, file);

        const formData: FormData = new FormData();
        formData.append('file', file);

        const uploadUrl: string = '/upload/file';

        fetch(uploadUrl, {
            method: 'POST',
            body: formData,
            headers: {
                'X-Requested-With': 'XMLHttpRequest',
                'X-CSRF-Token': this.getCSRFToken(),
            },
        })
            .then((response: Response) => {
                if (!response.ok) {
                    throw new Error(`Upload failed: ${response.status}`);
                }
                return response.json();
            })
            .then((data: any) => {
                if (data.success && data.url) {
                    const fileData = {
                        url: data.url,
                        name: file.name,
                        size: file.size,
                    };
                    onSuccess(entity, fileData);
                } else {
                    throw new Error(data.message || 'Upload failed');
                }
            })
            .catch((error: Error) => {
                console.warn('File upload to server failed, using local blob:', error);
                const fileData = {
                    url: URL.createObjectURL(file),
                    name: file.name,
                    size: file.size,
                    isBlob: true,
                };
                onSuccess(entity, fileData);
            });
    }

    /**
     * Get CSRF token for requests
     * –ü–æ–ª—É—á–∏—Ç—å CSRF —Ç–æ–∫–µ–Ω –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
     */
    private getCSRFToken(): string {
        const csrfMeta: HTMLMetaElement | null = document.querySelector('meta[name="csrf-token"]');

        if (csrfMeta) {
            return csrfMeta.content;
        }

        if (typeof (window as any).yii !== 'undefined' && (window as any).yii.getCsrfToken) {
            return (window as any).yii.getCsrfToken();
        }

        return '';
    }

    /**
     * Format file size
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
     * @param bytes - size in bytes / —Ä–∞–∑–º–µ—Ä –≤ –±–∞–π—Ç–∞—Ö
     */
    public formatFileSize(bytes: number): string {
        if (bytes === 0) {
            return '0 Bytes';
        }

        const kilobyte: number = 1024;
        const sizes: string[] = ['Bytes', 'KB', 'MB', 'GB'];
        const index: number = Math.floor(Math.log(bytes) / Math.log(kilobyte));

        return parseFloat((bytes / Math.pow(kilobyte, index)).toFixed(1)) + ' ' + sizes[index];
    }

    /**
     * Get file icon by filename
     * –ü–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫—É —Ñ–∞–π–ª–∞ –ø–æ –∏–º–µ–Ω–∏
     * @param fileName - name of the file / –∏–º—è —Ñ–∞–π–ª–∞
     */
    public getFileIcon(fileName: string): string {
        const extension: string | undefined = fileName.split('.').pop()?.toLowerCase();
        const iconMap: Record<string, string> = {
            pdf: 'üìÑ',
            doc: 'üìù',
            docx: 'üìù',
            xls: 'üìä',
            xlsx: 'üìä',
            ppt: 'üìä',
            pptx: 'üìä',
            txt: 'üìÑ',
            rtf: 'üìÑ',
            zip: 'üì¶',
            rar: 'üì¶',
            '7z': 'üì¶',
            jpg: 'üñºÔ∏è',
            jpeg: 'üñºÔ∏è',
            png: 'üñºÔ∏è',
            gif: 'üñºÔ∏è',
            svg: 'üñºÔ∏è',
            mp3: 'üéµ',
            wav: 'üéµ',
            mp4: 'üé¨',
            avi: 'üé¨',
            mov: 'üé¨',
        };

        return iconMap[extension || ''] || 'üìé';
    }

    /**
     * Get file extension
     * –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
     * @param fileName - name of the file / –∏–º—è —Ñ–∞–π–ª–∞
     */
    public getFileExtension(fileName: string): string {
        const parts: string[] = fileName.split('.');
        return parts.length > 1 ? parts[parts.length - 1] : '';
    }
}

export { FileHandler };
