/**
 * Card With Select Tool for the Editor.js
 * –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç Card With Select –¥–ª—è Editor.js
 *
 * To developers.
 * –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤.
 * To simplify Tool structure, we split it to multiple parts:
 * –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Tool, –º—ã —Ä–∞–∑–¥–µ–ª–∏–ª–∏ –µ–≥–æ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å—Ç–µ–π:
 *  1) index.ts ‚Äî main Tool's interface, public API and methods for working with data
 *     index.ts ‚Äî –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Tool, –ø—É–±–ª–∏—á–Ω–æ–µ API –∏ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏
 *  2) ui.ts ‚Äî module for UI manipulations: render, coordination of managers, etc
 *     ui.ts ‚Äî –º–æ–¥—É–ª—å –¥–ª—è –º–∞–Ω–∏–ø—É–ª—è—Ü–∏–π —Å UI: —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥, –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∏ —Ç.–¥.
 *  3) ui/ ‚Äî managers for different aspects: file handling, DOM rendering, etc
 *     ui/ ‚Äî –º–µ–Ω–µ–¥–∂–µ—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∞—Å–ø–µ–∫—Ç–æ–≤: –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤, —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ DOM –∏ —Ç.–¥.
 */
import { IconPlus } from '@codexteam/icons';
import { IconText } from '@codexteam/icons';
import { Ui } from './ui';
import './index.css';

import type { MenuConfig } from '@editorjs/editorjs/types/tools';
import type { API, ToolboxConfig, PasteConfig, BlockToolConstructorOptions, BlockTool, BlockAPI, PasteEvent } from '@editorjs/editorjs';
import type { NativeSelect } from './utils/native-select';
import type { CardWithSelectToolData } from './types/card-with-select-tool-data.interface';
import type { CardWithSelectConfig } from './types/card-with-select-config.interface';
import type { EntityType } from './types/entity.interface';
import type { TermToolConstructorOptions } from './types/term-tool-constructor-options.type';

/**
 * Implementation of CardWithSelectTool class
 * –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞—Å—Å–∞ CardWithSelectTool
 */
class CardWithSelectTool implements BlockTool {
  /**
   * Default maximum number of entities
   * –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—É—â–Ω–æ—Å—Ç–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
   */
  private static readonly DEFAULT_MAX_ENTITY_QUANTITY: number = 3;

  /**
   * Editor.js API instance
   * –≠–∫–∑–µ–º–ø–ª—è—Ä API Editor.js
   */
  private api: API;

  /**
   * Current Block API instance
   * –≠–∫–∑–µ–º–ø–ª—è—Ä API —Ç–µ–∫—É—â–µ–≥–æ –±–ª–æ–∫–∞
   */
  private block: BlockAPI;

  /**
   * Configuration for the CardWithSelectTool
   * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è CardWithSelectTool
   */
  private config: CardWithSelectConfig;

  /**
   * UI module instance
   * –≠–∫–∑–µ–º–ø–ª—è—Ä –º–æ–¥—É–ª—è UI
   */
  private ui: Ui;

  /**
   * Stores current block data internally
   * –í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–µ–∫—É—â–µ–≥–æ –±–ª–æ–∫–∞
   */
  private _data: { items: EntityType[] };

  /**
   * @param tool - tool properties got from editor.js
   * @param tool.data - previously saved data
   * @param tool.config - user config for Tool
   * @param tool.api - Editor.js API
   * @param tool.block - current Block API
   * 
   * @param tool - —Å–≤–æ–π—Å—Ç–≤–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –∏–∑ editor.js
   * @param tool.data - —Ä–∞–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
   * @param tool.config - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è Tool
   * @param tool.api - API Editor.js
   * @param tool.block - API —Ç–µ–∫—É—â–µ–≥–æ –±–ª–æ–∫–∞
   */
  
  constructor({ data, config, api, block }: TermToolConstructorOptions) {
    this.api = api;
    this.block = block;
  /**
   * Tool's initial config
   * –ù–∞—á–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Tool
   */
  this.config = {
    endpoint: config?.endpoint ?? '/blog/ajax-blog-list',
    endpointOne: config?.endpointOne ?? '/blog/ajax-blog-by-id?id=1',
    maxEntityQuantity: config?.maxEntityQuantity ?? CardWithSelectTool.DEFAULT_MAX_ENTITY_QUANTITY,
    additionalRequestData: config?.additionalRequestData,
    additionalRequestHeaders: config?.additionalRequestHeaders,
    types: config?.types,
    titlePlaceholder: this.api.i18n.t(config?.titlePlaceholder ?? 'Title'),
    descriptionPlaceholder: this.api.i18n.t(config?.descriptionPlaceholder ?? 'Description'),
    actions: config?.actions,
    configurableTypes: config?.configurableTypes ?? [
      {
        key: 'blog',
        buttonLabel: '–î–æ–±–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç–∞—Ç—å—é –≤ –±–ª–æ–≥',
        endpoint: '/blog/ajax-blog-list',
        endpointOne: '/blog/ajax-blog-by-id',
        searchPlaceholder: '–ü–æ–∏—Å–∫ —Å—Ç–∞—Ç–µ–π...',
        color: '#007acc',
        icon: 'üìÑ'
      },
    ],
    };

    /**
     * Module for working with UI
     * –ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å UI
     */
    this.ui = new Ui({
      api,
      config: this.config,
    });

    /**
     * Set saved state
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    this._data = {
      items: [],
    };
    this.data = data ?? { items: [] };
  }

  /**
   * Get Tool toolbox settings
   * –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–Ω–µ–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ Tool
   * icon - Tool icon's SVG
   * icon - SVG –∏–∫–æ–Ω–∫–∞ Tool
   * title - title to show in toolbox
   * title - –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ø–∞–Ω–µ–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
   */
  public static get toolbox(): ToolboxConfig {
    return {
      icon: IconText,
      title: '–ö–∞—Ä—Ç–æ—á–∫–∞ —Å–æ —Å—Å—ã–ª–∫–∞–º–∏',
    };
  }

  /**
   * Renders Block content
   * –†–µ–Ω–¥–µ—Ä–∏—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–ª–æ–∫–∞
   */
  public render(): HTMLDivElement {
    return this.ui.render() as HTMLDivElement;
  }

  /**
   * Validate data: check if Image exists
   * –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö: –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   * @param _savedData ‚Äî data received after saving / –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
   * @returns false if saved data is not correct, otherwise true / false –µ—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã, –∏–Ω–∞—á–µ true
   */
  public validate(_savedData: CardWithSelectToolData): boolean {
    return true;
  }

  /**
   * Return Block data
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –±–ª–æ–∫–∞
   */
  public save(): CardWithSelectToolData {
    this._data.items = [];

    this.ui.nodes.entities.querySelectorAll('.card-with-select__item').forEach((entity: Element): void => {
      const titleElement = entity.querySelector('.card-with-select__item__title');
      const descriptionElement = entity.querySelector('.card-with-select__item__description');
      const selectElement = entity.querySelector('select');
      const customLinkInput = entity.querySelector('.card-with-select__item__custom-link') as HTMLInputElement;
      const fileDataStr = (entity as HTMLElement).dataset.fileData;
      const linkType = (entity as HTMLElement).dataset.linkType as string;

      let fileData: {
        url: string;
        name: string;
        size?: number;
      } | null = null;

      if (fileDataStr) {
        try {
          fileData = JSON.parse(fileDataStr) as {
            url: string;
            name: string;
            size?: number;
          };
        } catch (error: unknown) {
          console.warn('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞:', error);
          console.warn('Error parsing file data:', error);
        }
      }

      if (titleElement && descriptionElement) {
        // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ NativeSelect, –µ—Å–ª–∏ –æ–Ω –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
        // Get value from NativeSelect if it's initialized
        const entityElement: HTMLElement & { _nativeSelectInstance?: NativeSelect } = entity as HTMLElement & { _nativeSelectInstance?: NativeSelect };
        const nativeSelectInstance: NativeSelect | undefined = entityElement._nativeSelectInstance;
        let entityId: string = '';

        if (nativeSelectInstance) {
          entityId = nativeSelectInstance.getValue() || '';
        } else if (selectElement) {
          entityId = selectElement.value || '';
        }

        this._data.items.push({
          title: titleElement.innerHTML,
          description: descriptionElement.innerHTML,
          entityId: entityId,
          customLink: customLinkInput?.value || undefined,
          file: fileData || undefined,
          linkType: linkType || 'blog',
        });
      }
    });

    return this.data;
  }

  /**
   * Returns configuration for block tunes: level
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–ª–æ–∫–∞: —É—Ä–æ–≤–µ–Ω—å
   * @returns MenuConfig
   */
  public renderSettings(): MenuConfig {
    const menuItems: MenuConfig = [];

    // Add configurable types
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã
    if (this.config.configurableTypes) {
      this.config.configurableTypes.forEach((linkType) => {
        menuItems.push({
          icon: IconPlus,
          label: this.api.i18n.t(linkType.buttonLabel),
          onActivate: (): void => this.addNewItemWithType(linkType.key),
          closeOnActivate: true,
          isActive: false,
        });
      });
    }

    // Add default types
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    menuItems.push(
      {
        icon: IconPlus,
        label: '–ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É',
        onActivate: (): void => this.addNewItemWithType('custom'),
        closeOnActivate: true,
        isActive: false,
      },
      {
        icon: IconPlus,
        label: '–§–∞–π–ª',
        onActivate: (): void => this.addNewItemWithType('file'),
        closeOnActivate: true,
        isActive: false,
      }
    );

    return menuItems;
  }

  /**
   * Add new item with specified type
   * –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ç–∏–ø–æ–º
   * @param type - type of the item / —Ç–∏–ø —ç–ª–µ–º–µ–Ω—Ç–∞
   */
  protected addNewItemWithType(type: string): void {
    this.ui.addNewItemWithType('', '', null, type);
  }

  /**
   * Specify paste substitutes
   * –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∑–∞–º–µ–Ω–∏—Ç–µ–ª–∏ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
   * @see {@link https://github.com/codex-team/editor.js/blob/master/docs/tools.md#paste-handling}
   */
  public static get pasteConfig(): PasteConfig {
    return {
    };
  }

  /**
   * Specify paste handlers
   * –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—Å—Ç–∞–≤–∫–∏
   * @see {@link https://github.com/codex-team/editor.js/blob/master/docs/tools.md#paste-handling}
   * @param event - editor.js custom paste event / –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–±—ã—Ç–∏–µ –≤—Å—Ç–∞–≤–∫–∏ editor.js
   *                              {@link https://github.com/codex-team/editor.js/blob/master/types/tools/paste-events.d.ts}
   */
  public onPaste(event: PasteEvent): void {
    switch (event.type) {
    }
  }

  /**
   * Private methods
   * ÃøÃø ÃøÃø ÃøÃø Ãø'Ãø'\ÃµÕáÃøÃø\–∑= ( ‚ñÄ ÕúÕû ñ‚ñÄ) =Œµ/ÃµÕáÃøÃø/‚ÄôÃø‚ÄôÃø Ãø ÃøÃø ÃøÃø ÃøÃø
   */

  /**
   * Stores all Tool's data
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ Tool
   * @param data - data in CardWithSelectTool format / –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ CardWithSelectTool
   */
  private set data(data: CardWithSelectToolData) {
    if (!data || !data.hasOwnProperty('items')) {
      this.ui.addNewItemWithType('', '', null, 'blog');
      return;
    }
    
    data.items.forEach((item: EntityType): void => {
      // Backward compatibility: ensure all fields are defined
      // –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: —É–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –≤—Å–µ –ø–æ–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã
      let linkType = item.linkType || 'blog';
      
      // Convert old 'article' type to 'blog' for backward compatibility
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç–∞—Ä—ã–π —Ç–∏–ø 'article' –≤ 'blog' –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      if (linkType === 'article') {
        linkType = 'blog';
      }

      const safeItem: EntityType = {
        title: item.title || '',
        description: item.description || '',
        entityId: item.entityId || '',
        customLink: item.customLink || undefined,
        file: item.file || undefined,
        linkType: linkType,
      };

      this.ui.addNewItemWithType(
        safeItem.title,
        safeItem.description,
        String(safeItem.entityId),
        linkType,
        safeItem.customLink,
        safeItem.file
      );
    });
  }

  /**
   * Return Tool data
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ Tool
   */
  private get data(): CardWithSelectToolData {
    return this._data;
  }
}

export default CardWithSelectTool;
